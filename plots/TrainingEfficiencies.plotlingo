#
# Generate some nice(er) plots of the training results.
#

include ("common.plotlingo");

#
# All the types of plots
#

plottypes = [
	{title => "Eff vs jet pT", xaxis => "Jet [GeV]", name => "pTefficiency"},
	{title => "Eff vs Lxy", xaxis => "Lxy [m]", name => "Lxyefficiency"}
];

plotTypes2D = [
	{title => "Eff as a function of jet pT and L_{xy}", xaxis => "Jet p_{T} [GeV]", yaxis => "L_{xy} [mm]", name => "pTvsLxyefficiency"}
];

trainings = ["BDT", "Run1"];
Legend("Run1" => {Color => 1, Title => "Run 1"});
Legend("BDT" => {Color => 2, Title => "BDT"});

#
# Legend info
#

#Legend("signal" => {Color => 2, Title => "Signal"});
#Legend("background" => {Color => 1, Title => "Background"});


##NormalizePlots();
TurnOffStatBoxes();

#
# 2D plots - these are simple since we have to do them one at a time.
#

for (t, trainings) {
  for (p, plotTypes2D) {
    for (s, signalCompareSamples) {
	  name = p["name"];
      f_training.Get("{t}/{s}/{name}")
		.tag(s)
		.plot()
		.addDrawOption("COLZ")
		.xaxis(p["xaxis"])
		.yaxis(p["yaxis"])
		.title("{t} - {s} - {name}")
		.size(1200,800);
	};
  };
};

#
# Plots of CalR vs pT per sample for the signal.
#
for (plottypes) {
    for (t, trainings) {

		plots = map(sample, signalCompareSamples) {
		  f_training.Get("{t}/{sample}/{name}").tag(sample);
		};

		plots
			.plot()
			.size(1200,800)
			.LegendOptions({"drawbox" => "false", "placement" => "UpperRight", "xmarg" => 0.0})
			.title("{t} - {title}");

#		sig = f_training.Get("signal/{name}training_signal{name_add}").normalize().minimum(0);
#		bac = f_training.Get("background/{name}training_background{name_add}").normalize().minimum(0);

#		[sig,bac]
#			.plot()
#			.size(1200, 800)
#			.title("{title}{title_add}")
#			.LegendOptions({"drawbox" => "false", "placement" => "UpperRight", "xmarg" => 0.0})
#			.xaxis(xaxis);
	};

	for (sample, signalCompareSamples) {
		plots = map(t, trainings) {
			f_training.Get("{t}/{sample}/{name}").tag(t);
		};

		plots
			.plot()
			.size(1200,800)
			.LegendOptions({"drawbox" => "false", "placement" => "UpperRight", "xmarg" => 0.0})
			.title("{sample} - {title}");
		
	};
};
